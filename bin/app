#!/usr/bin/env ruby

require_relative '../lib/bridgeapi/client'
require_relative '../lib/bridgeapi/transaction'
require_relative '../lib/bridgeapi/dependencies'

passwords = BridgeApi::PasswordStore.new('.passwords')
client = BridgeApi::Client.new

username = ENV['BRIDGEAPI_USER_EMAIL']

unless passwords.password_for(username)
  puts "Will create user account for #{username}"
  password = client.create_user(username)['password']
  passwords.store_for(username, password)
  puts "Now will authenticate #{username}"
  access_token = BridgeApi::AccessToken.new(client, username, passwords.password_for(username))
  puts client.post_with_access_token('v2/connect/items/add', body: { country: 'fr', prefill_email: username }, token: access_token)
  puts 'Connect using ⬆ url'
  exit 42
end

access_token = BridgeApi::AccessToken.new(client, username, passwords.password_for(username))

puts "📑 Let's list all connections to the banks"
client.items(token: access_token).each do |item|
  if (item['status']).zero?
    puts "  ✅ #{item['id']} at #{client.bank(item['bank_id'])['name']}"
  else
    puts '  ' + <<~ERROR
      ❌ #{item['id']} needs attention
         code is #{item['status']} (#{item['status_code_info']}), #{item['status_code_description']}
         bank is #{client.bank(item['bank_id'])['name']}
    ERROR
    exit 42 # let's exit to really show there is an issue
  end
end

# initialize service injection service
BridgeApi::Dependencies.setup(client, access_token)

n = 1000
since = Time.now - 60 * 86_400
puts "📑 Let's list #{n} transactions, since #{since}"
# FIXME: the normal workflow is to list "updated" transactions and store them, instead of relisting them everytime check https://docs.bridgeapi.io/reference#transation-resource
transactions = client
  .transactions(since: since, token: access_token)
  .lazy
  .take(n)
  .map { |t| BridgeApi::Transaction::Transaction.build(t) }


total_co2_kg = 0
transactions.each do |transaction|
  # {"id"=>38000730851904, "clean_description"=>"Virement Sepa Recu Seux Provision Abonnement Remi Ter", "bank_description"=>"VIREMENT SEPA RECU SEUX PROVISION ABONNEMENT REMI TER", "amount"=>316.0, "date"=>"2022-02-28", "updated_at"=>"2022-03-10T16:21:19.797Z", "currency_code"=>"EUR", "is_deleted"=>false, "category_id"=>3, "account_id"=>29524470, "is_future"=>false, "show_client_side"=>true}
  puts "  #{transaction}"
  total_co2_kg += transaction.co2_kg || 0
end

3.times { puts '' }

puts "Estimated CO2 footprint: #{total_co2_kg.round(0)}kg since #{since}"

accounted_euros = transactions.reject { |t| t.class == BridgeApi::Transaction::Transaction }.map { |t| t.amount.abs }.sum
total = transactions.map { |t| t.amount.abs }.sum

puts "This method accounts for #{(accounted_euros / total * 100).round(0)}% of expenses"


largest_without_estimation = transactions.select{ |t| t.class == BridgeApi::Transaction::Transaction }.max { |t| t.amount.abs }
puts "Largest transaction without impact estimation: #{largest_without_estimation}"
